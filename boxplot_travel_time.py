import psycopg2
import sys
from datetime import datetime,timedelta
import numpy as np
import matplotlib.pyplot as plt


def boxplot(start_time,table):
    try:
        conn = psycopg2.connect(database="ISSDdata",
                                        user="postgres",
                                        password="berkay12345",
                                        host="127.0.0.1",
                                        port="5432")

        #print("Successfully Connected")
        cur = conn.cursor()
    except:
        print("Connection failed")
        sys.exit(0)

    #start time = input
    #start_time="2020-07-01 21:43:00"

    #corridor 33.3_w_e
    result=['1576735', '1576731', '1576730', '389223', '389222', '389221', '646498', '646497', '646496', '646495', '646494', '646178', '646177', '646176', '646175', '1602685', '1602684', '1602683', '1602682', '1602681', '389284', '5605489', '5605488', '5605487', '5605486', '5605485', '5605484', '5605483', '5605482', '5605481', '5605480', '5605441', '5605440', '5605439', '5605334', '5702728', '5605356', '5605355', '5605354', '5605353', '5617290', '5617289', '5617288', '5617287', '5617286', '5617285', '5617284', '5617283', '5702702', '5702701', '5702700', '5702616', '5702615', '5702614', '5611667', '5611666', '5702611', '5702610', '5702609', '5702608', '5702607', '5702606', '5702605', '5702594', '5702593', '5702590', '5702589', '6155557', '6155556', '6155555', '6155554', '6155553', '6857357', '6857356', '6857355', '6857354', '6857353', '6857352', '6857351', '6857350', '5702490', '5702489', '5702488', '5702487', '5702486', '5702485', '5963006', '5963005', '6219419', '6219418', '6219417', '6219416', '6219415', '6219414', '6219413', '6219406', '6219405', '6219404']
    #corridor 33.13_w_e
    #result=['380239', '866585', '866584', '877914', '877913', '877912', '877911', '877910', '877909', '877908', '877907', '381384', '645939', '645938', '649536', '649535', '649534', '649533', '649537', '649544', '649543', '649542', '797228', '797230', '797229', '797231', '797227', '797222', '797221', '797220', '797219', '1552835', '1552834', '381956', '2191455', '2187656', '2187655', '2187654', '2187653', '382493', '382509', '382508', '649804', '649803', '649802', '649805', '649806', '382582', '382581', '655988', '655987', '794025', '1554879', '1554878', '1554887', '1554886', '1554885', '1554882', '1555958', '1556537', '1556536', '1556535', '1556532', '1556531', '1556530', '1556529', '1556528', '383120', '1554856', '1554855', '650186', '650185', '650184', '650183', '650182', '650181', '655968', '655967', '655966', '1552866', '1552865', '1552863', '1552862', '1589226', '1589225', '1589224', '1589223', '1589222', '1589221', '1589220', '378545', '378563', '1555989', '1550383', '1589229', '1589228', '1589227', '378153', '378174', '657074', '657073', '1227477', '1227476', '1227475', '1227474', '1227473', '1227472', '657069', '656743', '656742', '656741', '774563', '774562', '774561', '656735', '648720', '648719', '379313', '379312', '1552788', '1552787', '1552786', '775173', '775172', '775171', '657217', '1554754', '1554753', '657218', '1550677', '1550676', '1550675', '1550674', '1552422', '1552421', '6656740', '6703892', '647638', '647637', '2063427', '2063426', '2063425', '2063424', '2161401', '2161400', '2161399', '2161398', '2161397', '645982', '648173', '773084', '7057358', '7057357', '7057356', '2063548', '2063547', '2063546', '791511', '645974', '631784', '631341', '631340', '631339', '631318', '646975', '646974', '646973', '7002348', '7002347', '7002346', '7002345', '7002344', '7002343', '630670', '630672', '630671', '656885', '7002342', '7002341', '7002340', '7002339', '7002338', '7002337', '6784278', '645959', '866589', '1556073', '1556072', '1556071', '1556070', '1556069', '396279', '396278', '772306', '772305', '1577910', '1577911', '646596', '646595', '646594', '646593', '646592', '646591', '646590', '646589', '789219', '1577898', '1577899', '5651954', '789216', '789215', '789214', '647736', '647735', '647734', '647733', '647732', '647731', '645871', '645869', '647748', '647747', '647746', '645846', '645845', '645844', '6802900', '6630429', '647474', '647473', '5581825', '5581824', '5581823', '647471', '2192119', '647472', '5667097', '5667096', '786440', '786439', '786438', '786437', '647787', '647786', '647785', '647784', '647783', '647782', '647781', '647780', '647779', '788301', '788300', '788299', '2141646', '2141645', '2141644', '1557897', '644968', '644967', '646920', '646919', '1557324', '1557323', '1557322', '6611106', '6611105', '795224', '795223', '795222', '646904', '646903', '646902', '646901', '646900', '646899', '1548813', '1548814', '2203929']


    #result=['380239', '866585', '866584', '877914', '877913', '877912', '877911', '877910', '877909', '877908', '877907', '381384', '645939', '645938', '649536', '649535', '649534', '649533', '649537', '649544', '649543', '649542', '797228', '797230', '797229', '797231', '797227', '797222', '797221', '797220', '797219', '1552835', '1552834', '381956', '2191455', '2187656', '2187655', '2187654', '2187653', '382493', '382509', '382508', '649804', '649803', '649802', '649805', '649806', '382582', '382581', '655988', '655987', '794025', '1554879', '1554878', '1554887']
    # EXTRACT(EPOCH FROM date_time)
    for i in range(0, len(result)): #otomatik stringten sayıya çevirme
        result[i] = int(result[i])


    sq2=""" select "segment_id","travel_time","lengthmm", "discovery_time", "order_nr"
                from unnest(ARRAY{}) with ordinality AS x(segment_id, order_nr)
                join public.{} using(segment_id) where discovery_time >= '{}'
                order by x.order_nr, discovery_time;""".format(result,table,start_time)
    cur.execute(sq2)
    rol=cur.fetchall()


    data = []
    tempData = []
    x = 0
    curNumber = 1
    while x <= len(rol):

        if x == len(rol):
            data.append(tempData)
            break
        if curNumber != rol[x][4] or x == len(rol):
            data.append(tempData)
            tempData = []
            curNumber = rol[x][4]
            x -= 1
        else:

            tempData.append(rol[x])
        x += 1
        
                    
    fiveMin=300000 #milisecond
    Total = 0
    k = 1
    x = 0
    for i in range(len(data)):
        Total+=data[i][x][1]
        if Total >=fiveMin*k:
            x += 1
            k += 1
        
    #print(Total)
    total2=0
    for i in range(len(data)):
        total2+=data[i][0][2]
        i=i+1
    #print(total2)
    hız=((total2/1000)/(Total/1000))/(10/36)#km/hour
    #print('Yolculuk süresi (Milisaniye):',Total)
    #print('Yolculuk süresi (Dakika):',(Total/1000)/60)
    #print('Belirlenen rota {} metredir.'.format(total2/1000))
    #print('Araç saatte ortalama {} kilometre hızla yol almıştır.'.format(hız))
    return((Total/1000)/60)

import datetime
x = datetime.datetime(2018,10,1)
day=5
b=1
c=2
veriler=[]
for i in range(1,(day*48)+1):
    #print(x)
    if x.strftime("%d")== '0{}'.format(c):
        b+=1
        c+=1
    s=boxplot(x,'mersin_0{}1018_v2'.format(str(b)))
    veriler.append(s)
    x = x +  timedelta(minutes= 30)
    i+=1
tümveriler=[]    
yeniveriler=[]
e=0
f=0
for i in range(day*48):
    yeniveriler.append(veriler[e+f])
    e+=48
    if len(yeniveriler)==day:
        tümveriler.append(yeniveriler)
        yeniveriler=[]
        e=0
        f+=1
zamanlar=[]       
for i in range(48):
    b=x.strftime("%X")
    zamanlar.append(b)
    x=x+timedelta(minutes= 30)
#print(yeniveriler)



fig1, ax1 = plt.subplots()
ax1.set_ylabel('Travel Time(Minute)')
ax1.set_xlabel('Half-hour Periods Of The Day')
ax1.set_title('Corridor 33.3_w_e Weekly Travel Time Graph')
plt.setp(ax1.get_xticklabels(), rotation=90, ha="left")
ax1.boxplot(tümveriler,patch_artist=True,labels=zamanlar)
plt.show()

